@using SalesLT.Repositories;
@model  Customer

@{
    ViewBag.Title = "Edit Customer";
}

<div class="row">
    <div class="col-lg-12">
        <h2>@ViewBag.Title</h2>
    </div>
</div>

@using (Html.BeginForm("UpdateCustomer", "Sales"))
{
    <div class="row">
        @Html.HiddenFor(Model => Model.Id)
        <div class="col-lg-4">
            <div class="form-group">
                @Html.LabelFor(Model => Model.FirstName, "First Name", new { })
                @Html.EditorFor(Model => Model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.MiddleName, "Middle Name", new { })
                @Html.EditorFor(Model => Model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.LastName, "Last Name", new { })
                @Html.EditorFor(Model => Model.LastName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.EmailAddress, "Email Address", new { })
                @Html.EditorFor(Model => Model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.Phone, "Phone", new { })
                @Html.EditorFor(Model => Model.Phone, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="col-lg-4">
            <!--
                the logic on line 45 breaks the binding. You need explicitly loop over Model.CustomerAddresses
                creating a new variable from Model.CustomerAddresses breaks the binding
            --> 
            @{ 
                var customerAddress = Model.CustomerAddresses;
                int i;
            }
            @for (i = 0; i < customerAddress.Count(); i++)
            {
                @Html.HiddenFor(Model => customerAddress[i].Address.AddressId)
                <div class="form-group">
                    @Html.LabelFor(Model => customerAddress[i].Address.AddressLine1, "Address 1", new { })
                    @Html.EditorFor(Model => customerAddress[i].Address.AddressLine1, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(Model => customerAddress[i].Address.AddressLine2, "Address 2", new { })
                    @Html.EditorFor(Model => customerAddress[i].Address.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(Model => customerAddress[i].Address.City, "City", new { })
                    @Html.EditorFor(Model => customerAddress[i].Address.City, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(Model => customerAddress[i].Address.StateProvince, "State", new { })
                    @Html.EditorFor(Model => customerAddress[i].Address.StateProvince, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(Model => customerAddress[i].Address.CountryRegion, "Country", new { })
                    @Html.EditorFor(Model => customerAddress[i].Address.CountryRegion, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(Model => customerAddress[i].Address.PostalCode, "ZIP", new { })
                    @Html.EditorFor(Model => customerAddress[i].Address.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-lg-8 text-right">
            @Html.ActionLink("Back", "Index", "Sales", new object { }, new { @class = "btn btn-link" })
            <input type="submit" value="Update Customer" class="btn btn-primary" />
        </div>
    </div>
}
